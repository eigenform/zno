package zno.riscv.isa

import chisel3._
import chisel3.util._
import chisel3.experimental.ChiselEnum

import zno.common.Sext

// RISC-V instruction encoding types.
object RvEncType extends ChiselEnum {
  val ENC_ILL = Value
  val ENC_R   = Value // rd, rs1, rs2
  val ENC_I   = Value // rd, rs1,   _, imm
  val ENC_S   = Value //  _, rs1, rs2, imm
  val ENC_B   = Value //  _, rs1, rs2, imm
  val ENC_U   = Value // rd,   _,   _, imm
  val ENC_J   = Value // rd,   _,   _, imm
}

// RISC-V immediate formats. 
//
// NOTE: After an immediate has been extracted from an instruction, the
// full 32-bit value is recovered with the following operations:
//
//   I-type: sext32(imm12)
//   S-type: sext32(imm12)
//   B-type: sext32(imm12 << 1)
//   U-type: (imm20 << 12)
//   J-type: sext32(imm20 << 1)
//

object ImmFmt extends ChiselEnum {
  val F_NA = Value
  val F_I  = Value
  val F_S  = Value
  val F_B  = Value
  val F_U  = Value
  val F_J  = Value
}

//def extract_i(opcd: UInt): UInt = { 
//  Cat(opcd(31, 20)) 
//}
//def expand_i(imm: UInt): UInt = {
//  require(imm.getWidth == 12)
//  Sext(imm, 32)
//}
//def extract_s(opcd: UInt): UInt = {
//  Cat(opcd(31, 25), opcd(11, 7))
//}
//def expand_s(imm: UInt): UInt = {
//  require(imm.getWidth == 12)
//  Sext(imm, 32)
//}
//def extract_b(opcd: UInt): UInt = {
//  Cat(opcd(31), opcd(7), opcd(30, 25), opcd(11, 8))
//}
//def expand_b(imm: UInt): UInt = {
//  require(imm.getWidth == 12)
//  Sext(Cat(imm, 0.U(1.W)), 32)
//}
//def extract_u(opcd: UInt): UInt = {
//  Cat(opcd(31, 12))
//}
//def expand_u(imm: UInt): UInt = {
//  require(imm.getWidth == 20)
//  Cat(imm, 0.U(12.W))
//}
//def extract_j(opcd: UInt): UInt = {
//  Cat(opcd(31), opcd(19, 12), opcd(20), opcd(30, 25), opcd(24, 21))
//}
//def expand_j(imm: UInt): UInt = {
//  require(imm.getWidth == 20)
//  Sext(Cat(imm, 0.U(1.W)), 32)
//}








// RISC-V instruction opcodes.
//
// NOTE: For RV32I, the following opcodes are valid: 
//  - 00000 (LOAD)
//  - 00011 (MISC_MEM)
//  - 00100 (OP_IMM)
//  - 00101 (AUIPIC)
//  - 01000 (STORE)
//  - 01100 (OP)
//  - 01101 (LUI)
//  - 11000 (BRANCH)
//  - 11001 (JALR)
//  - 11011 (JAL)
//
object RvOpcode extends ChiselEnum {
  // I: [lb,lh,lw,lbu,lhu]
  val LOAD       = Value("b00000".U) 
  val LOAD_FP    = Value("b00001".U)
  val CUSTOM_0   = Value("b00010".U)
  // [fence,fence.i]
  val MISC_MEM   = Value("b00011".U) 
  // I: [addi,slti,sltiu,xori,ori,andi]
  val OP_IMM     = Value("b00100".U) 
  // U: [auipc]
  val AUIPC      = Value("b00101".U) 
  val OP_IMM_32  = Value("b00110".U)
  // S: [sb,sh,sw]
  val STORE      = Value("b01000".U) 
  val STORE_FP   = Value("b01001".U)
  val CUSTOM_1   = Value("b01010".U)
  val AMO        = Value("b01011".U)
  // R: [add,sub,sll,slt,sltu,xor,srl,sra,or,and]
  val OP         = Value("b01100".U) 
  // U: [lui]
  val LUI        = Value("b01101".U) 
  val OP_32      = Value("b01110".U)
  val MADD       = Value("b10000".U)
  val MSUB       = Value("b10001".U)
  val NMSUB      = Value("b10010".U)
  val NMADD      = Value("b10011".U)
  val OP_FP      = Value("b10100".U)
  val RES_0      = Value("b10101".U)
  val CUSTOM_2   = Value("b10110".U)
  // B: [beq, bne, blt, bge, bltu, bgeu]
  val BRANCH     = Value("b11000".U) 
  // I: [jalr]
  val JALR       = Value("b11001".U)
  val RES_1      = Value("b11010".U)
  // J: [jal]
  val JAL        = Value("b11011".U)
  val SYSTEM     = Value("b11100".U)
  val RES_2      = Value("b11101".U)
  val CUSTOM_3   = Value("b11110".U)
  val UNDEF      = Value("b11111".U)
}

// RV32I matching bit patterns.
// Generated with https://github.com/riscv/riscv-opcodes
// (ie. 'parse.py -chisel rv_i, rv32_i')
object Rv32iPattern {

  def BEQ                = BitPat("b?????????????????000?????1100011")
  def BGE                = BitPat("b?????????????????101?????1100011")
  def BGEU               = BitPat("b?????????????????111?????1100011")
  def BLT                = BitPat("b?????????????????100?????1100011")
  def BLTU               = BitPat("b?????????????????110?????1100011")
  def BNE                = BitPat("b?????????????????001?????1100011")

  def JAL                = BitPat("b?????????????????????????1101111")
  def JALR               = BitPat("b?????????????????000?????1100111")

  def LB                 = BitPat("b?????????????????000?????0000011")
  def LBU                = BitPat("b?????????????????100?????0000011")
  def LH                 = BitPat("b?????????????????001?????0000011")
  def LHU                = BitPat("b?????????????????101?????0000011")
  def LW                 = BitPat("b?????????????????010?????0000011")

  def SB                 = BitPat("b?????????????????000?????0100011")
  def SH                 = BitPat("b?????????????????001?????0100011")
  def SW                 = BitPat("b?????????????????010?????0100011")

  def AUIPC              = BitPat("b?????????????????????????0010111")
  def LUI                = BitPat("b?????????????????????????0110111")

  def ADD                = BitPat("b0000000??????????000?????0110011")
  def AND                = BitPat("b0000000??????????111?????0110011")
  def OR                 = BitPat("b0000000??????????110?????0110011")
  def SLL                = BitPat("b0000000??????????001?????0110011")
  def SLT                = BitPat("b0000000??????????010?????0110011")
  def SLTU               = BitPat("b0000000??????????011?????0110011")
  def SRA                = BitPat("b0100000??????????101?????0110011")
  def SRL                = BitPat("b0000000??????????101?????0110011")
  def SUB                = BitPat("b0100000??????????000?????0110011")
  def XOR                = BitPat("b0000000??????????100?????0110011")

  def ADDI               = BitPat("b?????????????????000?????0010011")
  def ANDI               = BitPat("b?????????????????111?????0010011")
  def ORI                = BitPat("b?????????????????110?????0010011")
  def SLLI               = BitPat("b0000000??????????001?????0010011")
  def SLTI               = BitPat("b?????????????????010?????0010011")
  def SLTIU              = BitPat("b?????????????????011?????0010011")
  def SRAI               = BitPat("b0100000??????????101?????0010011")
  def SRLI               = BitPat("b0000000??????????101?????0010011")
  def XORI               = BitPat("b?????????????????100?????0010011")

  def EBREAK             = BitPat("b00000000000100000000000001110011")
  def ECALL              = BitPat("b00000000000000000000000001110011")
  def FENCE              = BitPat("b?????????????????000?????0001111")

}


